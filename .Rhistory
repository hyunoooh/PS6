# set lower bound of integration:
# a numeric vector containing the largest integers of lower values
lower <- floor(lower)
# set upper bound of integration:
# a numeric vector containing the smallest integers of upper values
upper <- ceiling(upper)
# validity checking:
# if any lower bound is greater than upper bound, show the error message
if (any(lower > upper)) stop("lower must be smaller than upper")
# create all lower/upper bounds of integration
# parLappy applies operations of list parallelization using clusters
all.bounds <- parLapply(cl, 1:dim,
function(x){seq(lower[x], upper[x]-1, by=1)})
# create a matrix of all combinations of variables
gridss <- as.matrix(expand.grid(all.bounds))
# create integration grid with the least number of nodes
sp.grid <- createIntegrationGrid(type = 'KPU', dimension = dim, k = 5 )
# KPU is a nested rule for unweighted integral over [0,1]
# dimension of integration is user input
# k is accuracy level.
# create weights for lower bounds using weights in sp.grid
# we need to create weight values as many as number of rows of gridss
weights <- rep(sp.grid$weights, nrow(gridss))
# create nodes for combination of all points in integration
# because it's a list, we want to use lapply function;
# parLappy applies operations of list parallelization using clusters
nodes <- parLapply(cl = cl,
X = 1:nrow(gridss),
fun = function(x){gridss[x,] + sp.grid$nodes})
# create nodes by binding by rows
require("plyr")
nodes <- do.call("rbind", nodes)
# apply function g over each set of nodes
# foy applying operations using clusters, we can use parApply
gx.sp <- parApply(cl = cl,
X = nodes,
MARGIN = 1,
FUN = g, ...)
# multiply weights
val.sp <- gx.sp %*% weights
# Once we are done close the cluster so that resources
# such as memory are returned to the operating system.
stopCluster(cl)
# return final value as numeric
as.numeric(val.sp)
}
sg.int(test.f1, lower = c(-1, -1), upper = c(1, 1))
sg.int.multidim(test.f1, lower = c(-1, -1), upper = c(1, 1), dim = 2)
sg.int.multidim(test.f2, lower = c(-2, -2, -2), upper = c(2, 2, 2), dim = 3)
sg.int.multidim(test.f3, lower = c(-1, -1, -1, -1), upper = c(1, 1, 1, 1), dim = 4)
sg.int.parallel(test.f1, lower = c(-1, -1), upper = c(1, 1), dim = 2)
sg.int.parallel(test.f2, lower = c(-2, -2, -2), upper = c(2, 2, 2), dim = 3)
sg.int.parallel(test.f3, lower = c(-1, -1, -1, -1), upper = c(1, 1, 1, 1), dim = 4)
microbenchmark(
"sg.int" = sg.int(g = dnorm, lower = c(-1, -1), upper = c(1, 1)),
"sg.int.multidim" = sg.int.multidim(g = drnorm, lower = c(-1, -1, -1), upper = c(1, 1)),
times = 20)
expect_equal(sg.int(test.f1, lower = c(-1, -1), upper = c(1, 1)),
adaptIntegrate(f=test.f1, lowerLimit = c(-1, -1), upperLimit = c(1, 1))$integral,
tolerance = 0.1)
expect_equal(sg.int(test.f1, lower = c(-1, -1), upper = c(1, 1)),
adaptIntegrate(f=test.f1, lowerLimit = c(-1, -1), upperLimit = c(1, 1))$integral,
tolerance = 0.0001)
expect_equal(sg.int.multidim(test.f1, lower = c(-1, -1), upper = c(1, 1), dim = 2),
adaptIntegrate(f=test.f1, lowerLimit = c(-1, -1), upperLimit = c(1, 1))$integral,
tolerance = 0.0001)
expect_equal(sg.int.parallel(test.f1, lower = c(-1, -1), upper = c(1, 1), dim = 2),
adaptIntegrate(f=test.f1, lowerLimit = c(-1, -1), upperLimit = c(1, 1))$integral,
tolerance = 0.0001)
expect_equal(sg.int.multidim(test.f2, lower = c(-2, -2, -2), upper = c(2, 2, 2), dim = 3),
adaptIntegrate(f=test.f2, lowerLimit = c(-2, -2, -2), upperLimit = c(2, 2, 2))$integral,
tolerance = 0.0001)
expect_equal(sg.int.parallel(test.f2, lower = c(-2, -2, -2), upper = c(2, 2, 2), dim = 3),
adaptIntegrate(f=test.f2, lowerLimit = c(-2, -2, -2), upperLimit = c(2, 2, 2))$integral,
tolerance = 0.0001)
expect_equal(sg.int.multidim(test.f3, lower = c(-1, -1, -1, -1), upper = c(1, 1, 1, 1), dim = 4),
adaptIntegrate(f=test.f3, lowerLimit = c(-1, -1, -1, -1), upperLimit = c(1, 1, 1, 1))$integral,
tolerance = 0.0001)
expect_equal(sg.int.parallel(test.f3, lower = c(-1, -1, -1, -1), upper = c(1, 1, 1, 1), dim = 4),
adaptIntegrate(f=test.f3, lowerLimit = c(-1, -1, -1, -1), upperLimit = c(1, 1, 1, 1))$integral,
tolerance = 0.0001)
expect_error(sg.int(test.f2, lower = c(-2, -2, -2), upper = c(2, 2, 2)))
expect_error(sg.int(test.f3, lower = c(-1, -1, -1, -1), upper = c(1, 1, 1, 1)))
expect_error(sg.int.parallel(test.f2, lower = c(-2, -2), upper = (2, 2), dim = 3))
expect_error(sg.int.parallel(test.f2, lower = c(-2, -2), upper = c(2, 2), dim = 3))
expect_error(sg.int.parallel(test.f2, lower = c(-2, -2), upper = c(2, 2), dim = 4.5))
expect_error(sg.int.parallel(test.f3, lower = c(-1, -1, -1, -1), upper = c(1, 1), dim = 4))
expect_error(sg.int.parallel(test.f3, lower = c(-1, -1, -1, -1), upper = c(1, 1, 1, 1), dim = "4"))
microbenchmark(
"sg.int" = sg.int(g = test.f2, lower = c(-1, -1), upper = c(1, 1)),
"sg.int.multidim" = sg.int.multidim(g = test.f2, lower = c(-1, -1, -1), upper = c(1, 1, 1), dim=3),
times = 20)
library(microbenchmark)
microbenchmark(
"sg.int" = sg.int(g = test.f2, lower = c(-1, -1), upper = c(1, 1)),
"sg.int.multidim" = sg.int.multidim(g = test.f2, lower = c(-1, -1, -1), upper = c(1, 1, 1), dim=3),
times = 20)
microbenchmark(
"sg.int" = sg.int(g = test.f2, lower = c(-1, -1), upper = c(1, 1)),
"sg.int.multidim" = sg.int.multidim(g = test.f2, lower = c(-1, -1, -1), upper = c(1, 1, 1), dim=3),
times = 100)
microbenchmark(
"sg.int" = sg.int(g = test.f1, lower = c(-1, -1), upper = c(1, 1)),
"sg.int.multidim" = sg.int.multidim(g = test.f1, lower = c(-1, -1), upper = c(1, 1), dim=2),
times = 100)
microbenchmark(
"sg.int" = sg.int(g = test.f1, lower = c(-1, -1), upper = c(1, 1)),
"sg.int.multidim" = sg.int.multidim(g = test.f1, lower = c(-1, -1), upper = c(1, 1), dim=2),
times = 1000)
microbenchmark(
"sg.int" = sg.int(g = test.f1, lower = c(-1, -1), upper = c(1, 1)),
"sg.int.multidim" = sg.int.multidim(g = test.f1, lower = c(-1, -1), upper = c(1, 1), dim=2),
times = 200)
microbenchmark(
"sg.int" = sg.int(g = test.f1, lower = c(-1, -1), upper = c(1, 1)),
"sg.int.multidim" = sg.int.multidim(g = test.f1, lower = c(-1, -1), upper = c(1, 1), dim=2),
"sg.int.parallel" = sg.int.parallel(g = test.f1, lower = c(-1, -1), upper = c(1, 1), dim=2),
times = 200)
?microbenchmark
rm(list=ls())
sg.int <- function(g,..., lower, upper){
# load SparseGrid library
require("SparseGrid")
# validity test:
# if the length of lower and upper bounds are not equal, show the error message
if (length(lower) != length(upper)) stop("the length of lower and upper must be the same")
# if the length of lower and upper bounds are greater than 2, show the error message
if (length(lower) > 2) stop("Use sg.int.multidim() function, instead")
if (length(upper) > 2) stop("Use sg.int.multidim() function, instead")
# set lower bound of integration:
# a numeric vector containing the largest integers of lower values
lower <- floor(lower)
# set upper bound of integration:
# a numeric vector containing the smallest integers of upper values
upper <- ceiling(upper)
# if any lower bound is greater than upper bound, show the error message
if (any(lower > upper)) stop("lower must be smaller than upper")
# create a matrix of all combinations of variables
gridss <- as.matrix(expand.grid(seq(lower[1], upper[1]-1, by=1),
seq(lower[2], upper[2]-1, by=1)))
# create integration grid with the least number of nodes
sp.grid <- createIntegrationGrid(type = 'KPU', dimension = 2, k = 5 )
# KPU is a nested rule for unweighted integral over [0,1]
# k is accuracy level.
# create nodes for lower bounds
nodes <- gridss[1,]+sp.grid$nodes
# create weights for lower bounds using weights in sp.grid
weights <- sp.grid$weights
# create nodes for combination of all points in integration
for (i in 2:nrow(gridss)){
# create node for i by binding by rows
nodes <- rbind(nodes, gridss[i,]+sp.grid$nodes)
# create weights for combination i
weights <- c(weights, sp.grid$weights)
}
# apply function over each set of nodes
gx.sp <- apply(X = nodes, MARGIN = 1, FUN = g, ...)
# multiply weights
val.sp <- gx.sp %*% weights
# return final numeric values
as.numeric(val.sp)
}
sg.int.multidim <- function(g, ..., lower, upper, dim){
# load SparseGrid library
require("SparseGrid")
# validity checking:
# if the length of lower and upper bounds are not equal, show the error message
if (length(lower) != length(upper)) stop("the length of lower and upper must be the same")
# if lengths of lower and upper bounds are not equal to dimesion, show the error message
if (length(lower) != dim) stop("the length of lower must be equal to dim")
if (length(upper) != dim) stop("the length of upper must be equal to dim")
# if input dim is not "integer, greater than 0," show the error message
if (dim%%1 != 0 | dim <= 0) stop("dim must be integer, greater than 0")
# set lower bound of integration:
# a numeric vector containing the largest integers of lower values
lower <- floor(lower)
# set upper bound of integration:
# a numeric vector containing the smallest integers of upper values
upper <- ceiling(upper)
# if any lower bound is greater than upper bound, show the error message
if (any(lower > upper)) stop("lower must be smaller than upper")
# create all lower/upper bounds of integration
# because it's a list, we can use lapply function
all.bounds <- lapply(1:dim, function(x){seq(lower[x], upper[x]-1, by=1)})
# create a matrix of all combinations of variables
gridss <- as.matrix(expand.grid(all.bounds))
# create integration grid with the least number of nodes
sp.grid <- createIntegrationGrid(type = 'KPU', dimension = dim, k = 5 )
# KPU is a nested rule for unweighted integral over [0,1]
# dimension of integration is user input
# k is accuracy level.
# create nodes for lower bounds
nodes <- gridss[1,] + sp.grid$nodes
# create weights for lower bounds using weights in sp.grid
# we need to create weight values as many as number of rows of gridss
weights <- rep(sp.grid$weights, nrow(gridss))
# create nodes for combination of all points in integration
# because it's a list, we can use lapply function
nodes <- lapply(1:nrow(gridss), function(x){gridss[x,] + sp.grid$nodes})
# create node by binding by rows
nodes <- do.call(rbind, nodes)
# apply function g over each set of nodes
gx.sp <- apply(X = nodes, MARGIN = 1, FUN = g, ...)
# multiply weights
val.sp <- gx.sp %*% weights
# return final numeric values
as.numeric(val.sp)
}
sg.int.parallel <- function(g, ..., lower, upper, dim){
# load SparseGrid library; load parallel library
require("SparseGrid")
require("parallel")
# calculate the number of cpu cores on the current host
no_cores <- detectCores()
# initiate cluster
cl <- makeCluster(no_cores)
# validity checking:
# if the length of lower and upper bounds are not equal, show the error message
if (length(lower) != length(upper)) stop("the length of lower and upper must be the same")
# if lengths of lower and upper bounds are not equal to dimesion, show the error message
if (length(lower) != dim) stop("the length of lower must be equal to dim")
if (length(upper) != dim) stop("the length of upper must be equal to dim")
# if input dim is not "integer, greater than 0," show the error message
if (dim%%1 != 0 | dim <= 0) stop("dim must be integer, greater than 0")
# set lower bound of integration:
# a numeric vector containing the largest integers of lower values
lower <- floor(lower)
# set upper bound of integration:
# a numeric vector containing the smallest integers of upper values
upper <- ceiling(upper)
# validity checking:
# if any lower bound is greater than upper bound, show the error message
if (any(lower > upper)) stop("lower must be smaller than upper")
# create all lower/upper bounds of integration
# parLappy applies operations of list parallelization using clusters
all.bounds <- parLapply(cl, 1:dim,
function(x){seq(lower[x], upper[x]-1, by=1)})
# create a matrix of all combinations of variables
gridss <- as.matrix(expand.grid(all.bounds))
# create integration grid with the least number of nodes
sp.grid <- createIntegrationGrid(type = 'KPU', dimension = dim, k = 5 )
# KPU is a nested rule for unweighted integral over [0,1]
# dimension of integration is user input
# k is accuracy level.
# create weights for lower bounds using weights in sp.grid
# we need to create weight values as many as number of rows of gridss
weights <- rep(sp.grid$weights, nrow(gridss))
# create nodes for combination of all points in integration
# because it's a list, we want to use lapply function;
# parLappy applies operations of list parallelization using clusters
nodes <- parLapply(cl = cl,
X = 1:nrow(gridss),
fun = function(x){gridss[x,] + sp.grid$nodes})
# create nodes by binding by rows
require("plyr")
nodes <- do.call("rbind", nodes)
# apply function g over each set of nodes
# foy applying operations using clusters, we can use parApply
gx.sp <- parApply(cl = cl,
X = nodes,
MARGIN = 1,
FUN = g, ...)
# multiply weights
val.sp <- gx.sp %*% weights
# Once we are done close the cluster so that resources
# such as memory are returned to the operating system.
stopCluster(cl)
# return final value as numeric
as.numeric(val.sp)
}
library(testthat)
test.f1 <- function(x) x[1] + x[2]^2
test.f2 <- function(x) x[1] + 2*x[2]^2 + 3*x[3]^3
test.f3 <- function(x) 2*x[1] + 3*x[2]^2 + 4*x[3]^3 + x[4]^4
sg.int(test.f1, lower = c(-1, -1), upper = c(1, 1))
sg.int.multidim(test.f1, lower = c(-1, -1), upper = c(1, 1), dim = 2)
sg.int.multidim(test.f2, lower = c(-2, -2, -2), upper = c(2, 2, 2), dim = 3)
sg.int.multidim(test.f3, lower = c(-1, -1, -1, -1), upper = c(1, 1, 1, 1), dim = 4)
sg.int.parallel(test.f1, lower = c(-1, -1), upper = c(1, 1), dim = 2)
sg.int.parallel(test.f2, lower = c(-2, -2, -2), upper = c(2, 2, 2), dim = 3)
sg.int.parallel(test.f3, lower = c(-1, -1, -1, -1), upper = c(1, 1, 1, 1), dim = 4)
library(cubature)
expect_equal(sg.int(test.f1, lower = c(-1, -1), upper = c(1, 1)),
adaptIntegrate(f=test.f1, lowerLimit = c(-1, -1), upperLimit = c(1, 1))$integral,
tolerance = 0.0001)
expect_equal(sg.int.multidim(test.f1, lower = c(-1, -1), upper = c(1, 1), dim = 2),
adaptIntegrate(f=test.f1, lowerLimit = c(-1, -1), upperLimit = c(1, 1))$integral,
tolerance = 0.0001)
expect_equal(sg.int.parallel(test.f1, lower = c(-1, -1), upper = c(1, 1), dim = 2),
adaptIntegrate(f=test.f1, lowerLimit = c(-1, -1), upperLimit = c(1, 1))$integral,
tolerance = 0.0001)
expect_equal(sg.int.multidim(test.f2, lower = c(-2, -2, -2), upper = c(2, 2, 2), dim = 3),
adaptIntegrate(f=test.f2, lowerLimit = c(-2, -2, -2), upperLimit = c(2, 2, 2))$integral,
tolerance = 0.0001)
expect_equal(sg.int.multidim(test.f3, lower = c(-1, -1, -1, -1), upper = c(1, 1, 1, 1), dim = 4),
adaptIntegrate(f=test.f3, lowerLimit = c(-1, -1, -1, -1), upperLimit = c(1, 1, 1, 1))$integral,
tolerance = 0.0001)
expect_equal(sg.int.parallel(test.f2, lower = c(-2, -2, -2), upper = c(2, 2, 2), dim = 3),
adaptIntegrate(f=test.f2, lowerLimit = c(-2, -2, -2), upperLimit = c(2, 2, 2))$integral,
tolerance = 0.0001)
expect_equal(sg.int.parallel(test.f3, lower = c(-1, -1, -1, -1), upper = c(1, 1, 1, 1), dim = 4),
adaptIntegrate(f=test.f3, lowerLimit = c(-1, -1, -1, -1), upperLimit = c(1, 1, 1, 1))$integral,
tolerance = 0.0001)
expect_error(sg.int(test.f2, lower = c(-2, -2, -2), upper = c(2, 2, 2))) # lengths do not match
expect_error(sg.int(test.f3, lower = c(-1, -1, -1, -1), upper = c(1, 1, 1, 1))) # wrong dimension
expect_error(sg.int.parallel(test.f2, lower = c(-2, -2), upper = c(2, 2), dim = 3)) # lengths do not match
expect_error(sg.int.parallel(test.f2, lower = c(-2, -2), upper = c(2, 2), dim = 4.5)) # wrong value for dim
expect_error(sg.int.parallel(test.f3, lower = c(-1, -1, -1, -1), upper = c(1, 1), dim = 4)) # length and dim do not match
expect_error(sg.int.parallel(test.f3, lower = c(-1, -1, -1, -1), upper = c(1, 1, 1, 1), dim = "4")) # dim is not numeric
library(microbenchmark)
microbenchmark(
"sg.int" = sg.int(g = test.f1, lower = c(-1, -1), upper = c(1, 1)),
"sg.int.multidim" = sg.int.multidim(g = test.f1, lower = c(-1, -1), upper = c(1, 1), dim=2),
"sg.int.parallel" = sg.int.parallel(g = test.f1, lower = c(-1, -1), upper = c(1, 1), dim=2),
times = 200)
sg.int <- function(g,..., lower, upper){
# load SparseGrid library
require("SparseGrid")
# validity test:
# if the length of lower and upper bounds are not equal, show the error message
if (length(lower) != length(upper)) stop("the length of lower and upper must be the same")
# if the length of lower and upper bounds are greater than 2, show the error message
if (length(lower) > 2) stop("Use sg.int.multidim() function, instead")
if (length(upper) > 2) stop("Use sg.int.multidim() function, instead")
# set lower bound of integration:
# a numeric vector containing the largest integers of lower values
lower <- floor(lower)
# set upper bound of integration:
# a numeric vector containing the smallest integers of upper values
upper <- ceiling(upper)
# if any lower bound is greater than upper bound, show the error message
if (any(lower > upper)) stop("lower must be smaller than upper")
# create a matrix of all combinations of variables
gridss <- as.matrix(expand.grid(seq(lower[1], upper[1]-1, by=1),
seq(lower[2], upper[2]-1, by=1)))
# create integration grid with the least number of nodes
sp.grid <- createIntegrationGrid(type = 'KPU', dimension = 2, k = 5 )
# KPU is a nested rule for unweighted integral over [0,1]
# k is accuracy level.
# create nodes for lower bounds
nodes <- gridss[1,]+sp.grid$nodes
# create weights for lower bounds using weights in sp.grid
weights <- sp.grid$weights
# create nodes for combination of all points in integration
for (i in 2:nrow(gridss)){
# create node for i by binding by rows
nodes <- rbind(nodes, gridss[i,]+sp.grid$nodes)
# create weights for combination i
weights <- c(weights, sp.grid$weights)
}
# apply function over each set of nodes
gx.sp <- apply(X = nodes, MARGIN = 1, FUN = g, ...)
# multiply weights
val.sp <- gx.sp %*% weights
# return final numeric values
as.numeric(val.sp)
}
sg.int.multidim <- function(g, ..., lower, upper, dim){
# load SparseGrid library
require("SparseGrid")
# validity checking:
# if the length of lower and upper bounds are not equal, show the error message
if (length(lower) != length(upper)) stop("the length of lower and upper must be the same")
# if lengths of lower and upper bounds are not equal to dimesion, show the error message
if (length(lower) != dim) stop("the length of lower must be equal to dim")
if (length(upper) != dim) stop("the length of upper must be equal to dim")
# if input dim is not "integer, greater than 0," show the error message
if (dim%%1 != 0 | dim <= 0) stop("dim must be integer, greater than 0")
# set lower bound of integration:
# a numeric vector containing the largest integers of lower values
lower <- floor(lower)
# set upper bound of integration:
# a numeric vector containing the smallest integers of upper values
upper <- ceiling(upper)
# if any lower bound is greater than upper bound, show the error message
if (any(lower > upper)) stop("lower must be smaller than upper")
# create all lower/upper bounds of integration
# because it's a list, we can use lapply function
all.bounds <- lapply(1:dim, function(x){seq(lower[x], upper[x]-1, by=1)})
# create a matrix of all combinations of variables
gridss <- as.matrix(expand.grid(all.bounds))
# create integration grid with the least number of nodes
sp.grid <- createIntegrationGrid(type = 'KPU', dimension = dim, k = 5 )
# KPU is a nested rule for unweighted integral over [0,1]
# dimension of integration is user input
# k is accuracy level.
# create nodes for lower bounds
nodes <- gridss[1,] + sp.grid$nodes
# create weights for lower bounds using weights in sp.grid
# we need to create weight values as many as number of rows of gridss
weights <- rep(sp.grid$weights, nrow(gridss))
# create nodes for combination of all points in integration
# because it's a list, we can use lapply function
nodes <- lapply(1:nrow(gridss), function(x){gridss[x,] + sp.grid$nodes})
# create node by binding by rows
nodes <- do.call(rbind, nodes)
# apply function g over each set of nodes
gx.sp <- apply(X = nodes, MARGIN = 1, FUN = g, ...)
# multiply weights
val.sp <- gx.sp %*% weights
# return final numeric values
as.numeric(val.sp)
}
sg.int.parallel <- function(g, ..., lower, upper, dim){
# load SparseGrid library; load parallel library
require("SparseGrid")
require("parallel")
# calculate the number of cpu cores on the current host
no_cores <- detectCores()
# initiate cluster
cl <- makeCluster(no_cores)
# validity checking:
# if the length of lower and upper bounds are not equal, show the error message
if (length(lower) != length(upper)) stop("the length of lower and upper must be the same")
# if lengths of lower and upper bounds are not equal to dimesion, show the error message
if (length(lower) != dim) stop("the length of lower must be equal to dim")
if (length(upper) != dim) stop("the length of upper must be equal to dim")
# if input dim is not "integer, greater than 0," show the error message
if (dim%%1 != 0 | dim <= 0) stop("dim must be integer, greater than 0")
# set lower bound of integration:
# a numeric vector containing the largest integers of lower values
lower <- floor(lower)
# set upper bound of integration:
# a numeric vector containing the smallest integers of upper values
upper <- ceiling(upper)
# validity checking:
# if any lower bound is greater than upper bound, show the error message
if (any(lower > upper)) stop("lower must be smaller than upper")
# create all lower/upper bounds of integration
# parLappy applies operations of list parallelization using clusters
all.bounds <- parLapply(cl, 1:dim,
function(x){seq(lower[x], upper[x]-1, by=1)})
# create a matrix of all combinations of variables
gridss <- as.matrix(expand.grid(all.bounds))
# create integration grid with the least number of nodes
sp.grid <- createIntegrationGrid(type = 'KPU', dimension = dim, k = 5 )
# KPU is a nested rule for unweighted integral over [0,1]
# dimension of integration is user input
# k is accuracy level.
# create weights for lower bounds using weights in sp.grid
# we need to create weight values as many as number of rows of gridss
weights <- rep(sp.grid$weights, nrow(gridss))
# create nodes for combination of all points in integration
# because it's a list, we want to use lapply function;
# parLappy applies operations of list parallelization using clusters
nodes <- parLapply(cl = cl,
X = 1:nrow(gridss),
fun = function(x){gridss[x,] + sp.grid$nodes})
# create nodes by binding by rows
require("plyr")
nodes <- do.call("rbind", nodes)
# apply function g over each set of nodes
# foy applying operations using clusters, we can use parApply
gx.sp <- parApply(cl = cl,
X = nodes,
MARGIN = 1,
FUN = g, ...)
# multiply weights
val.sp <- gx.sp %*% weights
# Once we are done close the cluster so that resources
# such as memory are returned to the operating system.
stopCluster(cl)
# return final value as numeric
as.numeric(val.sp)
}
library(testthat)
test.f1 <- function(x) x[1] + x[2]^2
test.f2 <- function(x) x[1] + 2*x[2]^2 + 3*x[3]^3
test.f3 <- function(x) 2*x[1] + 3*x[2]^2 + 4*x[3]^3 + x[4]^4
sg.int(test.f1, lower = c(-1, -1), upper = c(1, 1))
sg.int.multidim(test.f1, lower = c(-1, -1), upper = c(1, 1), dim = 2)
sg.int.multidim(test.f2, lower = c(-2, -2, -2), upper = c(2, 2, 2), dim = 3)
sg.int.multidim(test.f3, lower = c(-1, -1, -1, -1), upper = c(1, 1, 1, 1), dim = 4)
sg.int.parallel(test.f1, lower = c(-1, -1), upper = c(1, 1), dim = 2)
sg.int.parallel(test.f2, lower = c(-2, -2, -2), upper = c(2, 2, 2), dim = 3)
sg.int.parallel(test.f3, lower = c(-1, -1, -1, -1), upper = c(1, 1, 1, 1), dim = 4)
library(cubature)
expect_equal(sg.int(test.f1, lower = c(-1, -1), upper = c(1, 1)),
adaptIntegrate(f=test.f1, lowerLimit = c(-1, -1), upperLimit = c(1, 1))$integral,
tolerance = 0.0001)
expect_equal(sg.int.multidim(test.f1, lower = c(-1, -1), upper = c(1, 1), dim = 2),
adaptIntegrate(f=test.f1, lowerLimit = c(-1, -1), upperLimit = c(1, 1))$integral,
tolerance = 0.0001)
expect_equal(sg.int.parallel(test.f1, lower = c(-1, -1), upper = c(1, 1), dim = 2),
adaptIntegrate(f=test.f1, lowerLimit = c(-1, -1), upperLimit = c(1, 1))$integral,
tolerance = 0.0001)
expect_equal(sg.int.multidim(test.f2, lower = c(-2, -2, -2), upper = c(2, 2, 2), dim = 3),
adaptIntegrate(f=test.f2, lowerLimit = c(-2, -2, -2), upperLimit = c(2, 2, 2))$integral,
tolerance = 0.0001)
expect_equal(sg.int.multidim(test.f3, lower = c(-1, -1, -1, -1), upper = c(1, 1, 1, 1), dim = 4),
adaptIntegrate(f=test.f3, lowerLimit = c(-1, -1, -1, -1), upperLimit = c(1, 1, 1, 1))$integral,
tolerance = 0.0001)
expect_equal(sg.int.parallel(test.f2, lower = c(-2, -2, -2), upper = c(2, 2, 2), dim = 3),
adaptIntegrate(f=test.f2, lowerLimit = c(-2, -2, -2), upperLimit = c(2, 2, 2))$integral,
tolerance = 0.0001)
expect_equal(sg.int.parallel(test.f3, lower = c(-1, -1, -1, -1), upper = c(1, 1, 1, 1), dim = 4),
adaptIntegrate(f=test.f3, lowerLimit = c(-1, -1, -1, -1), upperLimit = c(1, 1, 1, 1))$integral,
tolerance = 0.0001)
expect_error(sg.int(test.f2, lower = c(-2, -2, -2), upper = c(2, 2, 2))) # lengths do not match
expect_error(sg.int(test.f3, lower = c(-1, -1, -1, -1), upper = c(1, 1, 1, 1))) # wrong dimension
expect_error(sg.int.parallel(test.f2, lower = c(-2, -2), upper = c(2, 2), dim = 3)) # lengths do not match
expect_error(sg.int.parallel(test.f2, lower = c(-2, -2), upper = c(2, 2), dim = 4.5)) # wrong value for dim
expect_error(sg.int.parallel(test.f3, lower = c(-1, -1, -1, -1), upper = c(1, 1), dim = 4)) # length and dim do not match
expect_error(sg.int.parallel(test.f3, lower = c(-1, -1, -1, -1), upper = c(1, 1, 1, 1), dim = "4")) # dim is not numeric
library(microbenchmark)
warnings()
library(microbenchmark)
microbenchmark(
"sg.int" = sg.int(g = test.f1, lower = c(-1, -1), upper = c(1, 1)),
"sg.int.multidim" = sg.int.multidim(g = test.f1, lower = c(-1, -1), upper = c(1, 1), dim=2),
"sg.int.parallel" = sg.int.parallel(g = test.f1, lower = c(-1, -1), upper = c(1, 1), dim=2),
times = 200)
